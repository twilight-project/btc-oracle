package main

import (
	"database/sql"
	"fmt"
	"net/url"
	"time"

	_ "github.com/lib/pq"
	"github.com/spf13/viper"
	"github.com/tyler-smith/go-bip32"
)

var dbconn *sql.DB
var masterPrivateKey *bip32.Key
var judge bool
var oracleAddr string
var valAddr string

func initialize() {
	initConfigFile()
	btcPubkey := initWallet()
	dbconn = initDB()
	setDelegator(btcPubkey)
}

func main() {

	initialize()

	accountName := fmt.Sprintf("%v", viper.Get("accountName"))
	fmt.Println("account name : ", accountName)
	var forkscanner_host = fmt.Sprintf("%v:%v", viper.Get("forkscanner_host"), viper.Get("forkscanner_ws_port"))
	forkscanner_url := url.URL{Scheme: "ws", Host: forkscanner_host, Path: "/"}
	if accountName == "validator-sfo" {
		judge = true
	}

	time.Sleep(30 * time.Second)

	go orchestrator(accountName, forkscanner_url)

	initJudge(accountName)

	time.Sleep(1 * time.Minute)
	if judge == true {
		go startJudge(accountName)
	}

	time.Sleep(1 * time.Minute)
	go startBridge(accountName, forkscanner_url)
	startTransactionSigner(accountName)

	//for local testing
	// x := "0100000000010295f73635ef3a66ea0005c860a57138b34fc82478cc2698bec2385f2c48390a040000000000f5ffffff383c4fc1efa583ad35980b85fdc106251e4d1d0158f6b2621926b322f3a0f46d0000000000f5ffffff013f650100000000002200202e8be4e046ef844216dbf54e73479a9a75b1701ba6858becb68f5838051939d807200c40c0d7b91e2bd5825f7d0a6575d713fd44c226c55e86ed0a28a1297fd1e8b700483045022100e9a6a52114041c3a0f0e93dc89cb478a2efd8c38a62f3a126bd941aff2c4809a022044ef6b9f74bfccffbba6670d42fe06880f79f74730515171e9d1da0d54eceeb981483045022100a965f0256afda8cdd21153f7542c9156b465f3f463938f75f51e90a029de37e602201a3102fe47500195a52d071902d9729f40939ad91fa5862bb9374e80c30357ca814830450221009b5f08482f82c2fbc9ed8d4d338b99f5820e54aaaffe083e2cfe5f41a5ba6ef5022070a0045a55738f639f8d0ed932632abed065d2c8871ee926979bbc249a43ca0681483045022100cbf14d65c624fbb4f61a6cb0596474ca51586e98bc85f8c2e014054431f601ae0220592ebd8d025b555755e75c08154f7c8fc742e1cf572e53d476663a087dc3ac4581fd1801542102ca505bf28698f0b6c26114a725f757b88d65537dd52a5b6455a9cac9581f105521033e72f302ba2133eddd0c7416943d4fed4e7c60db32e6b8c58895d3b26e24f92721038b38721dbb1427fd9c65654f87cb424517df717ee2fea8b0a5c376a1734941672103b03fe3da02ac2d43a1c2ebcfc7b0497e89cc9f62b513c0fc14f10d3d1a2cd5e62103bb3694e798f018a157f9e6dfb51b91f70a275443504393040892b52e45b255c32103e2f80f2f5eb646df3e0642ae137bf13f5a9a6af4c05688e147c64e8fae196fe156ae6382012088a91456dcb37f2b76e39f494ade2518c6ca7230046d0487672102ca505bf28698f0b6c26114a725f757b88d65537dd52a5b6455a9cac9581f1055ac64038c4b0cb275686807200c40c0d7b91e2bd5825f7d0a6575d713fd44c226c55e86ed0a28a1297fd1e8b70047304402203baf54668423d03c003ac64ab41ecab6fd57f8d2b1c46f94a910280b8770998f022001df220ca6e4e1e89c642a00e758e0354db35c3a0f725992069852b32c4381d281473044022011eb8893f14ff2e7e2e7063805c0d6dc6ef0f3812dfca973a6021497c80d738d0220086a44e88c4d836833f0cee0ae7cc3f447edfb1edaf9d9abecb064b741584b6481483045022100dae159285fb536e0078e32601a9a8a1337c36f9c02831b435c6774e6bb97655502204d85e21e7007156b0b7101f6dbf115b4eab9bb929db0d3b5c38472afb633372d81483045022100eb445181da0ce84f6494129ba69ca575efa64e2719f6cff496d5dfdaa5603c3302200e98aa4f94d859f39f4c0fcc1c8701ec107e4a83fa1d650421979c62c5e253a681fd1801542102ca505bf28698f0b6c26114a725f757b88d65537dd52a5b6455a9cac9581f105521033e72f302ba2133eddd0c7416943d4fed4e7c60db32e6b8c58895d3b26e24f92721038b38721dbb1427fd9c65654f87cb424517df717ee2fea8b0a5c376a1734941672103b03fe3da02ac2d43a1c2ebcfc7b0497e89cc9f62b513c0fc14f10d3d1a2cd5e62103bb3694e798f018a157f9e6dfb51b91f70a275443504393040892b52e45b255c32103e2f80f2f5eb646df3e0642ae137bf13f5a9a6af4c05688e147c64e8fae196fe156ae6382012088a91456dcb37f2b76e39f494ade2518c6ca7230046d0487672102ca505bf28698f0b6c26114a725f757b88d65537dd52a5b6455a9cac9581f1055ac64038c4b0cb275686800000000"

	// tx, _ := createTxFromHex(x)
	// tx.TxIn[0].Witness = tx.TxIn[1].Witness
	// tx.TxIn = tx.TxIn[1:len(tx.TxIn)]

	// tx.TxOut[0].Value = 50000 - 15000

	// var UnsignedTx bytes.Buffer
	// tx.Serialize(&UnsignedTx)
	// hexTx := hex.EncodeToString(UnsignedTx.Bytes())
	// fmt.Println(hexTx)

}
