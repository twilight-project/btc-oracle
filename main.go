package main

import (
	"database/sql"
	"fmt"
	"net/url"
	"time"

	_ "github.com/lib/pq"
	"github.com/spf13/viper"
	"github.com/tyler-smith/go-bip32"
)

var dbconn *sql.DB
var masterPrivateKey *bip32.Key
var judge bool
var oracleAddr string
var valAddr string

func initialize() {
	initConfigFile()
	btcPubkey := initWallet()
	dbconn = initDB()
	setDelegator(btcPubkey)
}

func main() {

	initialize()

	accountName := fmt.Sprintf("%v", viper.Get("accountName"))
	fmt.Println("account name : ", accountName)
	var forkscanner_host = fmt.Sprintf("%v:%v", viper.Get("forkscanner_host"), viper.Get("forkscanner_ws_port"))
	forkscanner_url := url.URL{Scheme: "ws", Host: forkscanner_host, Path: "/"}
	if accountName == "validator-sfo" {
		judge = true
	}

	time.Sleep(30 * time.Second)

	go orchestrator(accountName, forkscanner_url)

	initJudge(accountName)

	time.Sleep(1 * time.Minute)
	if judge == true {
		go startJudge(accountName)
	}

	time.Sleep(1 * time.Minute)
	go startBridge(accountName, forkscanner_url)
	startTransactionSigner(accountName)

	// x := "010000000001036e0946dba5e99df00f5f7e5e51428431b3bdb1a0141440a3f38e1cb3a818b9a60000000000f5fffffff6090ebd400001251a90b81a7872d0c0a44fbaee0f6c051c657f772013524cb20000000000f5ffffff1336702d40cdbb44f2121cb778dea0f3135b258c142f4879b94af684a1ea14dd0000000000f5ffffff01888402000000000022002031aef9e0d279470dca736365175acc3427dc93c84fe29579ef0ec6b32cdb75280720e709f3461a883e044d639726d0cac7653abb0cef251a2b3bb12178ca463a72e40047304402206804ac014b0e9f88a77caf32a6e4398b9c631d38a23753b2abcc0ae81999570c02203b21a844ea8c534d5ceab39dd5fa8ec154df31d2c2a844b0ab4d3073421d11158148304502210082bf9cbfe4eab8db3de667b20c76d98b47f86a50ea93217b22b1c936e6382b1402202c29517c05a77e3b6ca42ee77d77b1d28c9d8b6a04e8f7028b6f031b2e47a0bf81483045022100e39121a78f6e3befaf80efe500caf843d579ca5a177a80dd7ffb17fe7016923502206846cc9228168a19bad546775eb834ad7e17413bcca58430d465534e677f76248147304402207f0e1f0fb27f822e93ed3ca544fbb2027118cbde0019353d1a0eeca14f0f784e022076ba8c6cf3eee735eb068901480bf06193f497df38590d02d6e19e801a3e30ea81fd1801542102ca505bf28698f0b6c26114a725f757b88d65537dd52a5b6455a9cac9581f105521033e72f302ba2133eddd0c7416943d4fed4e7c60db32e6b8c58895d3b26e24f92721038b38721dbb1427fd9c65654f87cb424517df717ee2fea8b0a5c376a1734941672103b03fe3da02ac2d43a1c2ebcfc7b0497e89cc9f62b513c0fc14f10d3d1a2cd5e62103bb3694e798f018a157f9e6dfb51b91f70a275443504393040892b52e45b255c32103e2f80f2f5eb646df3e0642ae137bf13f5a9a6af4c05688e147c64e8fae196fe156ae6382012088a914645c7fd39436de315628665363d05624a62a8e6787672102ca505bf28698f0b6c26114a725f757b88d65537dd52a5b6455a9cac9581f1055ac6403cb4a0cb27568680720e709f3461a883e044d639726d0cac7653abb0cef251a2b3bb12178ca463a72e40047304402206804ac014b0e9f88a77caf32a6e4398b9c631d38a23753b2abcc0ae81999570c02203b21a844ea8c534d5ceab39dd5fa8ec154df31d2c2a844b0ab4d3073421d11158148304502210082bf9cbfe4eab8db3de667b20c76d98b47f86a50ea93217b22b1c936e6382b1402202c29517c05a77e3b6ca42ee77d77b1d28c9d8b6a04e8f7028b6f031b2e47a0bf81483045022100e39121a78f6e3befaf80efe500caf843d579ca5a177a80dd7ffb17fe7016923502206846cc9228168a19bad546775eb834ad7e17413bcca58430d465534e677f76248147304402207f0e1f0fb27f822e93ed3ca544fbb2027118cbde0019353d1a0eeca14f0f784e022076ba8c6cf3eee735eb068901480bf06193f497df38590d02d6e19e801a3e30ea81fd1801542102ca505bf28698f0b6c26114a725f757b88d65537dd52a5b6455a9cac9581f105521033e72f302ba2133eddd0c7416943d4fed4e7c60db32e6b8c58895d3b26e24f92721038b38721dbb1427fd9c65654f87cb424517df717ee2fea8b0a5c376a1734941672103b03fe3da02ac2d43a1c2ebcfc7b0497e89cc9f62b513c0fc14f10d3d1a2cd5e62103bb3694e798f018a157f9e6dfb51b91f70a275443504393040892b52e45b255c32103e2f80f2f5eb646df3e0642ae137bf13f5a9a6af4c05688e147c64e8fae196fe156ae6382012088a914645c7fd39436de315628665363d05624a62a8e6787672102ca505bf28698f0b6c26114a725f757b88d65537dd52a5b6455a9cac9581f1055ac6403cb4a0cb27568680720e709f3461a883e044d639726d0cac7653abb0cef251a2b3bb12178ca463a72e40047304402206804ac014b0e9f88a77caf32a6e4398b9c631d38a23753b2abcc0ae81999570c02203b21a844ea8c534d5ceab39dd5fa8ec154df31d2c2a844b0ab4d3073421d11158148304502210082bf9cbfe4eab8db3de667b20c76d98b47f86a50ea93217b22b1c936e6382b1402202c29517c05a77e3b6ca42ee77d77b1d28c9d8b6a04e8f7028b6f031b2e47a0bf81483045022100e39121a78f6e3befaf80efe500caf843d579ca5a177a80dd7ffb17fe7016923502206846cc9228168a19bad546775eb834ad7e17413bcca58430d465534e677f76248147304402207f0e1f0fb27f822e93ed3ca544fbb2027118cbde0019353d1a0eeca14f0f784e022076ba8c6cf3eee735eb068901480bf06193f497df38590d02d6e19e801a3e30ea81fd1801542102ca505bf28698f0b6c26114a725f757b88d65537dd52a5b6455a9cac9581f105521033e72f302ba2133eddd0c7416943d4fed4e7c60db32e6b8c58895d3b26e24f92721038b38721dbb1427fd9c65654f87cb424517df717ee2fea8b0a5c376a1734941672103b03fe3da02ac2d43a1c2ebcfc7b0497e89cc9f62b513c0fc14f10d3d1a2cd5e62103bb3694e798f018a157f9e6dfb51b91f70a275443504393040892b52e45b255c32103e2f80f2f5eb646df3e0642ae137bf13f5a9a6af4c05688e147c64e8fae196fe156ae6382012088a914645c7fd39436de315628665363d05624a62a8e6787672102ca505bf28698f0b6c26114a725f757b88d65537dd52a5b6455a9cac9581f1055ac6403cb4a0cb275686800000000"
	// tx, _ := tempcreateTxFromHex(x)
	// tx.TxIn = tx.TxIn[:len(tx.TxIn)-2]
	// tx.TxOut[0].Value = 4000

	// var UnsignedTx bytes.Buffer
	// tx.Serialize(&UnsignedTx)
	// hexTx := hex.EncodeToString(UnsignedTx.Bytes())
	// fmt.Println("transaction UnSigned Refund: ", hexTx)

}

// func tempcreateTxFromHex(txHex string) (*wire.MsgTx, error) {
// 	// Decode the transaction hex string
// 	txBytes, err := hex.DecodeString(txHex)
// 	if err != nil {
// 		return nil, fmt.Errorf("failed to decode hex string: %v", err)
// 	}

// 	// Create a new transaction object
// 	tx := wire.NewMsgTx(wire.TxVersion)

// 	// Deserialize the transaction bytes
// 	err = tx.Deserialize(bytes.NewReader(txBytes))
// 	if err != nil {
// 		return nil, fmt.Errorf("failed to deserialize transaction: %v", err)
// 	}

// 	return tx, nil
// }
